// Twilio Service for SMS and Voice Alerts
import twilio from 'twilio'
import { Logger } from './logger.js'

class TwilioService {
  constructor() {
    this.accountSid = process.env.TWILIO_ACCOUNT_SID
    this.authToken = process.env.TWILIO_AUTH_TOKEN
    this.phoneNumber = process.env.TWILIO_PHONE_NUMBER
    this.logger = new Logger({ service: 'TwilioService' })
    
    if (this.accountSid && this.authToken) {
      this.client = twilio(this.accountSid, this.authToken)
    }
  }

  // Send SMS alert to farmer
  async sendSMSAlert(phoneNumber, message, language = 'en') {
    if (!this.client) {
      this.logger.warn('twilio_not_configured', { message: 'Twilio credentials not found' })
      return { success: false, error: 'Twilio not configured' }
    }

    try {
      this.logger.info('sms_alert_sending', { phoneNumber, language })
      
      const result = await this.client.messages.create({
        body: message,
        from: this.phoneNumber,
        to: phoneNumber
      })

      this.logger.info('sms_alert_sent', { sid: result.sid, status: result.status })
      return { success: true, sid: result.sid, status: result.status }
    } catch (error) {
      this.logger.error('sms_alert_failed', { error: error.message, phoneNumber })
      return { success: false, error: error.message }
    }
  }

  // Send voice call alert (TTS)
  async sendVoiceAlert(phoneNumber, message, language = 'en') {
    if (!this.client) {
      this.logger.warn('twilio_not_configured', { message: 'Twilio credentials not found' })
      return { success: false, error: 'Twilio not configured' }
    }

    try {
      this.logger.info('voice_alert_sending', { phoneNumber, language })
      
      // Create TwiML for voice call
      const twiml = new twilio.twiml.VoiceResponse()
      
      // Set language-specific voice
      const voiceParams = this.getVoiceParams(language)
      twiml.say(voiceParams, message)
      
      const result = await this.client.calls.create({
        twiml: twiml.toString(),
        from: this.phoneNumber,
        to: phoneNumber
      })

      this.logger.info('voice_alert_sent', { sid: result.sid, status: result.status })
      return { success: true, sid: result.sid, status: result.status }
    } catch (error) {
      this.logger.error('voice_alert_failed', { error: error.message, phoneNumber })
      return { success: false, error: error.message }
    }
  }

  // Get voice parameters for different languages
  getVoiceParams(language) {
    const voiceMap = {
      'en': { voice: 'alice', language: 'en-US' },
      'hi': { voice: 'alice', language: 'hi-IN' },
      'mr': { voice: 'alice', language: 'mr-IN' },
      'default': { voice: 'alice', language: 'en-US' }
    }
    
    return voiceMap[language] || voiceMap.default
  }

  // Send agricultural alert with multilingual support
  async sendAgriculturalAlert(phoneNumber, alertData, language = 'en') {
    const message = this.formatAgriculturalMessage(alertData, language)
    
    // Send both SMS and voice for critical alerts
    const [smsResult, voiceResult] = await Promise.all([
      this.sendSMSAlert(phoneNumber, message, language),
      this.sendVoiceAlert(phoneNumber, message, language)
    ])

    return {
      success: smsResult.success || voiceResult.success,
      sms: smsResult,
      voice: voiceResult
    }
  }

  // Format agricultural message in different languages
  formatAgriculturalMessage(alertData, language) {
    const { type, severity, region, crop, recommendation } = alertData
    
    const messages = {
      'en': {
        drought: `üö® DROUGHT ALERT for ${region}: ${crop} crops at risk. ${recommendation}`,
        flood: `üåä FLOOD ALERT for ${region}: ${crop} crops threatened. ${recommendation}`,
        pest: `üêõ PEST ALERT for ${region}: ${crop} crops affected. ${recommendation}`,
        disease: `ü¶† DISEASE ALERT for ${region}: ${crop} crops infected. ${recommendation}`,
        default: `‚ö†Ô∏è AGRICULTURAL ALERT for ${region}: ${recommendation}`
      },
      'hi': {
        drought: `üö® ‡§∏‡•Ç‡§ñ‡§æ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ${region} ‡§ï‡•á ‡§≤‡§ø‡§è: ${crop} ‡§´‡§∏‡§≤‡•á‡§Ç ‡§ñ‡§§‡§∞‡•á ‡§Æ‡•á‡§Ç‡•§ ${recommendation}`,
        flood: `üåä ‡§¨‡§æ‡§¢‡§º ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ${region} ‡§ï‡•á ‡§≤‡§ø‡§è: ${crop} ‡§´‡§∏‡§≤‡•á‡§Ç ‡§ñ‡§§‡§∞‡•á ‡§Æ‡•á‡§Ç‡•§ ${recommendation}`,
        pest: `üêõ ‡§ï‡•Ä‡§ü ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ${region} ‡§ï‡•á ‡§≤‡§ø‡§è: ${crop} ‡§´‡§∏‡§≤‡•á‡§Ç ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§‡•§ ${recommendation}`,
        disease: `ü¶† ‡§∞‡•ã‡§ó ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ${region} ‡§ï‡•á ‡§≤‡§ø‡§è: ${crop} ‡§´‡§∏‡§≤‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§‡•§ ${recommendation}`,
        default: `‚ö†Ô∏è ‡§ï‡•É‡§∑‡§ø ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ${region} ‡§ï‡•á ‡§≤‡§ø‡§è: ${recommendation}`
      },
      'mr': {
        drought: `üö® ‡§¶‡•Å‡§∑‡•ç‡§ï‡§æ‡§≥ ‡§∏‡•Ç‡§ö‡§®‡§æ ${region} ‡§∏‡§æ‡§†‡•Ä: ${crop} ‡§™‡§ø‡§ï‡•á ‡§ß‡•ã‡§ï‡•ç‡§Ø‡§æ‡§§‡•§ ${recommendation}`,
        flood: `üåä ‡§™‡•Ç‡§∞ ‡§∏‡•Ç‡§ö‡§®‡§æ ${region} ‡§∏‡§æ‡§†‡•Ä: ${crop} ‡§™‡§ø‡§ï‡•á ‡§ß‡•ã‡§ï‡•ç‡§Ø‡§æ‡§§‡•§ ${recommendation}`,
        pest: `üêõ ‡§ï‡•Ä‡§° ‡§∏‡•Ç‡§ö‡§®‡§æ ${region} ‡§∏‡§æ‡§†‡•Ä: ${crop} ‡§™‡§ø‡§ï‡•á ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§‡•§ ${recommendation}`,
        disease: `ü¶† ‡§∞‡•ã‡§ó ‡§∏‡•Ç‡§ö‡§®‡§æ ${region} ‡§∏‡§æ‡§†‡•Ä: ${crop} ‡§™‡§ø‡§ï‡•á ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§‡•§ ${recommendation}`,
        default: `‚ö†Ô∏è ‡§∂‡•á‡§§‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ ${region} ‡§∏‡§æ‡§†‡•Ä: ${recommendation}`
      }
    }

    const langMessages = messages[language] || messages['en']
    return langMessages[type] || langMessages.default
  }

  // Send weather-driven warning
  async sendWeatherWarning(phoneNumber, weatherData, language = 'en') {
    const { temperature, humidity, precipitation, region, crop } = weatherData
    
    let alertType = 'default'
    let recommendation = this.getWeatherRecommendation(temperature, humidity, precipitation, language)
    
    if (temperature > 35) {
      alertType = 'drought'
    } else if (precipitation > 50) {
      alertType = 'flood'
    } else if (humidity > 80) {
      alertType = 'disease'
    }

    return this.sendAgriculturalAlert(phoneNumber, {
      type: alertType,
      severity: 'medium',
      region,
      crop,
      recommendation
    }, language)
  }

  // Get weather recommendations in different languages
  getWeatherRecommendation(temperature, humidity, precipitation, language) {
    const recommendations = {
      'en': {
        highTemp: 'High temperature detected. Consider irrigation and shade protection.',
        heavyRain: 'Heavy rainfall expected. Ensure proper drainage.',
        highHumidity: 'High humidity detected. Monitor for fungal diseases.',
        default: 'Monitor weather conditions closely.'
      },
      'hi': {
        highTemp: '‡§â‡§ö‡•ç‡§ö ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ ‡§π‡•à‡•§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§î‡§∞ ‡§õ‡§æ‡§Ø‡§æ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§',
        heavyRain: '‡§≠‡§æ‡§∞‡•Ä ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§ ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§',
        highHumidity: '‡§â‡§ö‡•ç‡§ö ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ ‡§π‡•à‡•§ ‡§´‡§Ç‡§ó‡§≤ ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§',
        default: '‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•Ä ‡§¨‡§æ‡§∞‡•Ä‡§ï‡•Ä ‡§∏‡•á ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§'
      },
      'mr': {
        highTemp: '‡§â‡§ö‡•ç‡§ö ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§Ü‡§¢‡§≥‡§≤‡•á ‡§Ü‡§π‡•á. ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§Ü‡§£‡§ø ‡§∏‡§æ‡§µ‡§≤‡•Ä ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£‡§æ‡§ö‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡§æ.',
        heavyRain: '‡§ú‡§° ‡§™‡§æ‡§ä‡§∏ ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ü‡§π‡•á. ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ú‡§≤‡§®‡§ø‡§É‡§∏‡§æ‡§∞‡§£ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§æ.',
        highHumidity: '‡§â‡§ö‡•ç‡§ö ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§Ü‡§¢‡§≥‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§´‡§Ç‡§ó‡§≤ ‡§∞‡•ã‡§ó‡§æ‡§Ç‡§ö‡•á ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§æ.',
        default: '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§ö‡•á ‡§ú‡§µ‡§≥‡•Ç‡§® ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§æ.'
      }
    }

    const langRecs = recommendations[language] || recommendations['en']
    
    if (temperature > 35) {
      return langRecs.highTemp
    } else if (precipitation > 50) {
      return langRecs.heavyRain
    } else if (humidity > 80) {
      return langRecs.highHumidity
    }
    
    return langRecs.default
  }

  // Send yield prediction alert
  async sendYieldAlert(phoneNumber, yieldData, language = 'en') {
    const { crop, region, predictedYield, averageYield, percentage } = yieldData
    
    let alertType = 'default'
    let recommendation = this.getYieldRecommendation(percentage, language)
    
    if (percentage < -10) {
      alertType = 'drought'
    } else if (percentage > 10) {
      alertType = 'default'
    }

    const yieldMessage = this.formatYieldMessage(crop, predictedYield, percentage, language)

    return this.sendAgriculturalAlert(phoneNumber, {
      type: alertType,
      severity: 'medium',
      region,
      crop,
      recommendation: `${yieldMessage} ${recommendation}`
    }, language)
  }

  // Get yield recommendations in different languages
  getYieldRecommendation(percentage, language) {
    const recommendations = {
      'en': {
        below: 'Below average yield expected. Consider drought-resistant varieties.',
        above: 'Above average yield expected. Plan for storage and marketing.',
        normal: 'Monitor crop health and weather conditions.'
      },
      'hi': {
        below: '‡§î‡§∏‡§§ ‡§∏‡•á ‡§ï‡§Æ ‡§â‡§™‡§ú ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§ ‡§∏‡•Ç‡§ñ‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§',
        above: '‡§î‡§∏‡§§ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§â‡§™‡§ú ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§î‡§∞ ‡§µ‡§ø‡§™‡§£‡§® ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§',
        normal: '‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§'
      },
      'mr': {
        below: '‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ï‡§Æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ü‡§π‡•á. ‡§¶‡•Å‡§∑‡•ç‡§ï‡§æ‡§≥ ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡§ï ‡§ú‡§æ‡§§‡•Ä‡§Ç‡§ö‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡§æ.',
        above: '‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ü‡§π‡•á. ‡§∏‡§æ‡§†‡§µ‡§£ ‡§Ü‡§£‡§ø ‡§µ‡§ø‡§™‡§£‡§®‡§æ‡§ö‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡§∞‡§æ.',
        normal: '‡§™‡•Ä‡§ï ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ü‡§£‡§ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§ö‡•á ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§æ.'
      }
    }

    const langRecs = recommendations[language] || recommendations['en']
    
    if (percentage < -10) {
      return langRecs.below
    } else if (percentage > 10) {
      return langRecs.above
    }
    
    return langRecs.normal
  }

  // Format yield message in different languages
  formatYieldMessage(crop, predictedYield, percentage, language) {
    const messages = {
      'en': `${crop} yield prediction: ${predictedYield} tons (${percentage}% vs average).`,
      'hi': `${crop} ‡§â‡§™‡§ú ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®: ${predictedYield} ‡§ü‡§® (‡§î‡§∏‡§§ ‡§∏‡•á ${percentage}%)‡•§`,
      'mr': `${crop} ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§Ç‡§¶‡§æ‡§ú: ${predictedYield} ‡§ü‡§® (‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä‡§™‡•á‡§ï‡•ç‡§∑‡§æ ${percentage}%)‡•§`
    }

    return messages[language] || messages['en']
  }
}

export const twilioService = new TwilioService()
export default twilioService
